import telegram
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackContext, CallbackQueryHandler, MessageHandler, Filters

import pars_func

def read_token(filename):
    with open(filename, 'r') as file:
        return file.read().strip()

TOKEN = read_token('token.txt')
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä—É–ø–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_groups = {}



def start(update: Update, context: CallbackContext) -> None:
    keyboard = [
        [InlineKeyboardButton("Read the iOS manual", url='https://teletype.in/@geocode/Zj6q780IQAk')],
        [InlineKeyboardButton("Menu", callback_data='show_menu')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text(
        f"üéì PRUE Study Buddy can help you add a schedule to your calendar app. \nIf you have Android installed, just click on the .ics file to import the schedule. For iOS users, follow the instructions to set up the import. \nReady to get started?",
        reply_markup=reply_markup
    )

def menu(update: Update, context: CallbackContext) -> None:
    custom_keyboard = [
        [KeyboardButton("Current week"), KeyboardButton("Next week")],
        [KeyboardButton("Change group")],
        [KeyboardButton("iOS manual")],
    ]
    reply_markup = ReplyKeyboardMarkup(custom_keyboard, resize_keyboard=True)
    update.message.reply_text("Select:", reply_markup=reply_markup)

def send_instruction_link(update: Update, context: CallbackContext) -> None:
    instruction_link = "https://teletype.in/@geocode/Zj6q780IQAk"
    update.message.reply_text("Here are the instructions for iOS", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("Open the manual", url=instruction_link)]]))


def button_click(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    if query.data == 'show_menu':
        menu(query, context)

def set_group(update: Update, context: CallbackContext) -> None:
    update.message.reply_text("Enter the group number.\nFor example: 15.06–¥-–º–µ–Ω03–∞/21–±")
    # –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–ø–ø—ã
    context.user_data['waiting_for_group'] = True

def handle_group_number(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    if 'waiting_for_group' in context.user_data and pars_func.check_group(update, update.message.text):
        group_number = update.message.text
        user_groups[user_id] = group_number
        del context.user_data['waiting_for_group']
        update.message.reply_text(f"‚úÖ The group has been successfully selected\n{group_number}")
    else:
        update.message.reply_text(f"‚ùå Incorrect group entered\nClick the 'Change group' button again")
        # –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É 'Change group', —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É.

def send_current_schedule(update: Update, context: CallbackContext) -> None:

    user_id = update.message.from_user.id
    if user_id in user_groups:
        group_number = user_groups[user_id]
        pars_func.send_schedule(update, user_groups, user_id)
    else:
        update.message.reply_text("First, set your group number with the 'Change group' command.")

def send_next_schedule(update: Update, context: CallbackContext) -> None:
    update.message.reply_text("The feature is in development...")
    # user_id = update.message.from_user.id
    # if user_id in user_groups:
    #     group_number = user_groups[user_id]
    #     pars_func.send_n_schedule(update, user_groups, user_id)
    # else:
    #     update.message.reply_text("First, set your group number with the 'Change group' command.")

def main():

    updater = Updater(token=TOKEN, use_context=True)
    dispatcher = updater.dispatcher

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    dispatcher.add_handler(CommandHandler('start', start))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏
    dispatcher.add_handler(CallbackQueryHandler(button_click))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu
    dispatcher.add_handler(CommandHandler('menu', menu))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"
    dispatcher.add_handler(MessageHandler(Filters.text("iOS manual"), send_instruction_link))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã "–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É"
    dispatcher.add_handler(MessageHandler(Filters.text("Change group"), set_group))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–¢–µ–∫—É—â–∞—è"
    dispatcher.add_handler(MessageHandler(Filters.text("Next week"), send_next_schedule))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–¢–µ–∫—É—â–∞—è"
    dispatcher.add_handler(MessageHandler(Filters.text("Current week"), send_current_schedule))

    

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–ø–ø—ã
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_group_number))

    


    updater.start_polling()  # –ó–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è await
    updater.idle()

if __name__ == '__main__':
    main()