import telegram
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackContext, CallbackQueryHandler, MessageHandler, Filters

import pars_func

def read_token(filename):
    with open(filename, 'r') as file:
        return file.read().strip()

TOKEN = read_token('token.txt')
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä—É–ø–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_groups = {}



def start(update: Update, context: CallbackContext) -> None:
    keyboard = [
        [InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è iOS", url='https://teletype.in/@geocode/Zj6q780IQAk')],
        [InlineKeyboardButton("–ú–µ–Ω—é", callback_data='show_menu')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç!\n–ë–æ—Ç —Å–¥–µ–ª–∞–Ω –º–∞—ë–≤—Ü–µ–º –¥–ª—è –†–≠–£.\n    –ë–æ—Ç –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–º —Ñ–æ—Ä–º–∞—Ç–∞ .ics, –∫–æ—Ç–æ—Ä—ã–π —É–¥–æ–±–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –ª—é–±–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å (Google, –Ø–Ω–¥–µ–∫—Å, Samsung, Apple, Outlook).\n    –î–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ Android –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ä–∞–∑—É: —Ñ–∞–π–ª –∫–∞–ª–µ–Ω–¥–∞—Ä—è –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –ª—é–±–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.\n    –í–ª–∞–¥–µ–ª—å—Ü–∞–º iOS –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–¥–µ–ª–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ –∑–∞–π–º–µ—Ç –±–æ–ª—å—à–µ 2 –º–∏–Ω—É—Ç\n    –ü—Ä–æ—á–∏—Ç–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∏–ª–∏ –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é —Ç—ã –º–æ–∂–µ—à—å –Ω–∏–∂–µ –ø–æ –∫–Ω–æ–ø–∫–∞–º:",
        reply_markup=reply_markup
    )

def menu(update: Update, context: CallbackContext) -> None:
    custom_keyboard = [
        [KeyboardButton("–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è"), KeyboardButton("–°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è")],
        [KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É")],
        [KeyboardButton("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")],
    ]
    reply_markup = ReplyKeyboardMarkup(custom_keyboard, resize_keyboard=True)
    update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

def send_instruction_link(update: Update, context: CallbackContext) -> None:
    instruction_link = "https://teletype.in/@geocode/Zj6q780IQAk"
    update.message.reply_text("–í–æ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è iOS", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é", url=instruction_link)]]))


def button_click(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    if query.data == 'show_menu':
        menu(query, context)

def set_group(update: Update, context: CallbackContext) -> None:
    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã\n–ù–∞–ø—Ä–∏–º–µ—Ä: 15.06–¥-–º–µ–Ω03–∞/21–±")
    # –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–ø–ø—ã
    context.user_data['waiting_for_group'] = True

def handle_group_number(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    if 'waiting_for_group' in context.user_data and pars_func.check_group(update.message.text):
        group_number = update.message.text
        user_groups[user_id] = group_number
        del context.user_data['waiting_for_group']
        update.message.reply_text(f"‚úÖ–ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞‚úÖ\n{group_number}")
    else:
        update.message.reply_text(f"‚ùå–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∞‚ùå\n–ù–∞–∂–º–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É'")
        # –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É '–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É', —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É.

def send_current_schedule(update: Update, context: CallbackContext) -> None:
    pars_func.hihi()

    user_id = update.message.from_user.id
    if user_id in user_groups:
        group_number = user_groups[user_id]
        pars_func.send_schedule(update, user_groups, user_id)
    else:
        update.message.reply_text("–î–ª—è –Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã –∫–æ–º–∞–Ω–¥–æ–π '–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É'.")

def send_next_schedule(update: Update, context: CallbackContext) -> None:
    update.message.reply_text("–§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")


def main():
    updater = Updater(token=TOKEN, use_context=True)
    dispatcher = updater.dispatcher

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    dispatcher.add_handler(CommandHandler('start', start))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏
    dispatcher.add_handler(CallbackQueryHandler(button_click))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu
    dispatcher.add_handler(CommandHandler('menu', menu))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"
    dispatcher.add_handler(MessageHandler(Filters.text("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"), send_instruction_link))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã "–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É"
    dispatcher.add_handler(MessageHandler(Filters.text("–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É"), set_group))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–¢–µ–∫—É—â–∞—è"
    dispatcher.add_handler(MessageHandler(Filters.text("–°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è"), send_next_schedule))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–¢–µ–∫—É—â–∞—è"
    dispatcher.add_handler(MessageHandler(Filters.text("–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è"), send_current_schedule))

    

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–ø–ø—ã
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_group_number))

    


    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()